var log = require('log')(module);

function User(id, socket, x, y, radius){
	this.id = id;
	this.x = x;
	this.y = y;
	this.radius = radius;

	this.data = {};

	this.speedX = 5;
	this.speedY = 5;

	this.socket = socket;
}

User.prototype = {
	moveUp: function(){
		this.y -= this.speedY;
	},
	moveDown: function(){
		this.y += this.speedY;
	},
	moveLeft: function(){
		this.x -= this.speedX;
	},
	moveRight: function(){
		this.x += this.speedX;
	},
	countData: function(){
		var num = 0;

		for (var x in this.data){
			if (this.data.hasOwnProperty(x)){
				num += 1;
			}
		}

		return num;
	},
	checkData: function(){
		var data = this.data;
		var count = this.countData(data);

		if (count === 0){
			return false;
		}

		if (data.x !== this.x || data.y !== this.y || data.radius !== this.radius){
			return false;
		}

		return true;
	},
	updateData: function(callback){

		this.data.x = this.x;
		this.data.y = this.y;
		this.data.radius = this.radius;

		callback.call(this);

	}
};

function Users(){
	this.users = {};
}

Users.prototype = {
	countObject: function(obj){
		var num = 0;

		for (var x in obj){
			if (obj.hasOwnProperty(x)){
				num += 1;
			}
		}

		return num;
	},
	updateBroadcast: function(callback, time){
		var self = this;
		var users = self.users;

		if (callback){

			setTimeout(function(){

				for (var p in users){
					if (users.hasOwnProperty(p)){
						callback.call(users[p]);
					}
				}

				self.updateBroadcast(callback, time);
			}, time);

		}

	},
	broadcast: function(data, currentUserId, all){

		var user, userId, userWebSocket;

		for (var uid in this.users){
			if (this.users.hasOwnProperty(uid)){
				user = this.users[uid];
				userId = user.id;
				userWebSocket = user.socket;

				if (!all && currentUserId === userId) continue;

				userWebSocket.send(data);

			}
		}

	},
	broadcastUser: function(callback, id){
		var users = this.users;
		var currentUser = users[id];
		var currentUserSocket = currentUser.socket;

		var user, contextCallback;

		for (var uid in users){
			if (users.hasOwnProperty(uid)){
				user = users[uid];

				contextCallback = callback.call(user);

				currentUserSocket.send(contextCallback);

			}
		}

	},
	has: function(id){
		var status = (id in this.users);

		if (status){
			log.debug('пользователь существует');
		} else {
			log.debug('пользователь не существует');
		}

		return status;
	},
	add: function(id, user){

		if (!this.has(id)){
			this.users[id] = user;
			log.info('Пользователь создан ' + id);
		}

	},
	update: function(){},
	remove: function(id){

		if (this.has(id)){
			log.info('Пользователь удален ' + id);
			delete this.users[id];
		}

	},
	createId: function(){
		var number = Math.ceil(Math.random() * 100000);
		var date = new Date();
		var time = date.getTime();
		var key = number + '_' + time;

		if (key in this.users){
			key = this.createId();
		}

		return key;
	},
	control: function(id, key, callback){

		if (this.has(id)){

			var user = this.users[id];

			/* keys */

			// 1 - left
			// 2 - up
			// 3 - right
			// 4 - down

			switch(key){
				case 1: // left
					user.moveLeft();
					break;
				case 2: // up
					user.moveUp();
					break;
				case 3: // right
					user.moveRight();
					break;
				case 4: // down
					user.moveDown();
					break;
			}

			callback.call(user);

		}

	}
}

exports.User = User;
exports.Users = Users;